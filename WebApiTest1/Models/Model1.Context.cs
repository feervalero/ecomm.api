//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApiTest1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ECommerceEntities : DbContext
    {
        public ECommerceEntities()
            : base("name=ECommerceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Audience> Audience { get; set; }
        public virtual DbSet<FeatureType> FeatureType { get; set; }
        public virtual DbSet<Inventory> Inventory { get; set; }
        public virtual DbSet<Module> Module { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<Price> Price { get; set; }
        public virtual DbSet<PriceType> PriceType { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductFeature> ProductFeature { get; set; }
        public virtual DbSet<Promotion> Promotion { get; set; }
        public virtual DbSet<PromotionType> PromotionType { get; set; }
        public virtual DbSet<RefreshToken> RefreshToken { get; set; }
        public virtual DbSet<Resource> Resource { get; set; }
        public virtual DbSet<ResourceType> ResourceType { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RoleRight> RoleRight { get; set; }
        public virtual DbSet<StatusType> StatusType { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserClaim> UserClaim { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }
        public virtual DbSet<vwInventoryBySku> vwInventoryBySku { get; set; }
    
        public virtual ObjectResult<Nullable<System.Guid>> Inventory_Add(Nullable<System.Guid> productId, Nullable<System.Guid> statusTypeId, Nullable<int> quantityOnReserve, Nullable<int> quantityAvailable, Nullable<int> minimumQuantityAvailable, Nullable<bool> active)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("StatusTypeId", statusTypeId) :
                new ObjectParameter("StatusTypeId", typeof(System.Guid));
    
            var quantityOnReserveParameter = quantityOnReserve.HasValue ?
                new ObjectParameter("QuantityOnReserve", quantityOnReserve) :
                new ObjectParameter("QuantityOnReserve", typeof(int));
    
            var quantityAvailableParameter = quantityAvailable.HasValue ?
                new ObjectParameter("QuantityAvailable", quantityAvailable) :
                new ObjectParameter("QuantityAvailable", typeof(int));
    
            var minimumQuantityAvailableParameter = minimumQuantityAvailable.HasValue ?
                new ObjectParameter("MinimumQuantityAvailable", minimumQuantityAvailable) :
                new ObjectParameter("MinimumQuantityAvailable", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("Inventory_Add", productIdParameter, statusTypeIdParameter, quantityOnReserveParameter, quantityAvailableParameter, minimumQuantityAvailableParameter, activeParameter);
        }
    
        public virtual int Inventory_Del(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inventory_Del", idParameter);
        }
    
        public virtual int Inventory_Upd(Nullable<System.Guid> id, Nullable<System.Guid> productId, Nullable<System.Guid> statusTypeId, Nullable<int> quantityOnReserve, Nullable<int> quantityAvailable, Nullable<int> minimumQuantityAvailable, Nullable<bool> active)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("StatusTypeId", statusTypeId) :
                new ObjectParameter("StatusTypeId", typeof(System.Guid));
    
            var quantityOnReserveParameter = quantityOnReserve.HasValue ?
                new ObjectParameter("QuantityOnReserve", quantityOnReserve) :
                new ObjectParameter("QuantityOnReserve", typeof(int));
    
            var quantityAvailableParameter = quantityAvailable.HasValue ?
                new ObjectParameter("QuantityAvailable", quantityAvailable) :
                new ObjectParameter("QuantityAvailable", typeof(int));
    
            var minimumQuantityAvailableParameter = minimumQuantityAvailable.HasValue ?
                new ObjectParameter("MinimumQuantityAvailable", minimumQuantityAvailable) :
                new ObjectParameter("MinimumQuantityAvailable", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inventory_Upd", idParameter, productIdParameter, statusTypeIdParameter, quantityOnReserveParameter, quantityAvailableParameter, minimumQuantityAvailableParameter, activeParameter);
        }
    }
}
